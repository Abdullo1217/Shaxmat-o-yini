# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d1_u4YD8fFHXiJLEPdt2on6Q1cF2KlFm
"""

# first let's make sure you have internet enabled
import requests
requests.get('http://www.google.com',timeout=10).ok

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# # ensure we are on the latest version of kaggle-environments
# !pip install --upgrade kaggle-environments

# Now let's set up the chess environment!
from kaggle_environments import make
env = make("chess", debug=True)

# this should run a game in the environment between two random bots
# NOTE: each game starts from a randomly selected opening
result = env.run(["random", "random"])
env.render(mode="ipython", width=1000, height=1000)

# Commented out IPython magic to ensure Python compatibility.
# %%writefile main.py
# from Chessnut import Game
# import random
# 
# def chess_bot(obs):
#     """
#     Simple chess bot that prioritizes checkmates, then captures, queen promotions, then randomly moves.
# 
#     Args:
#         obs: An object with a 'board' attribute representing the current board state as a FEN string.
#  Returns:
#         A string representing the chosen move in UCI notation (e.g., "e2e4")
#     """
#     # 0. Parse the current board state and generate legal moves using Chessnut library
#     game = Game(obs.board)
#     moves = list(game.get_moves())
# 
#     # 1. Check a subset of moves for checkmate
#     for move in moves[:10]:
#         g = Game(obs.board)
#         g.apply_move(move)
#         if g.status == Game.CHECKMATE:
#             return move
#             # 2. Check for captures
#     for move in moves:
#         if game.board.get_piece(Game.xy2i(move[2:4])) != ' ':
#             return move
# 
#     # 3. Check for queen promotions
#     for move in moves:
#         if "q" in move.lower():
#             return move
# 
#     # 4. Random move if no checkmates or captures
#     return random.choice(moves)
#

# Now let's set up the chess environment!
from kaggle_environments import make
env = make("chess", debug=True)

result = env.run(["main.py", "random"]) # Execute run within the same cell as the definition of `env`.
print("Agent exit status/reward/time left: ")
# look at the generated replay.json and print out the agent info
for agent in result[-1]:
    print("\t", agent.status, "/", agent.reward, "/", agent.observation.remainingOverageTime)
print("\n")
# render the game
env.render(mode="ipython", width=1000, height=1000)

from google.colab import drive
drive.mount('/content/drive')